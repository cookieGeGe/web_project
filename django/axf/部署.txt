部署1：
1. 安装包
sudo apt update

apt install mysql-server mysql-client

2. 设置远程访问mysql
	a) 查找 mysql.conf 
		find / -name mysql.cnf
	b）注释mysql.cof文件的bind_address
		/etc/mysql/mysql.conf.d

	c）GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root@123' WITH GRANT OPTION;

		flush privileges; 

3. 修改django的配置文件
	a）修改settings.py文件中的DEBUG=FALSE，ALLOWED_HOST=['*']
	b）修改urls.py

		b1）from django.views.static import serve
		url中加入以下配置
		url(r'^static/(?P<path>.*)$', serve, {"document_root": settings.STATIC_ROOT}),
		url(r'^media/(?P<path>.*)$', serve, {"document_root": settings.MEDIA_ROOT}),
		b2）setting中
		STATIC_ROOT = os.path.join(BASE_DIR, 'static')
		b3）url中修改首页访问的地址
		url(r'^$', views.home)


4. 修改首页的启动地址
	修改工程目录中的url ，并修改url(r'^$', views.home)

5. 安装pip3
	apt install python3-pip

6. 安装必备库
	pip3 install django==1.11
	pip3 install pymysql
	pip3 install Pillow

7. 查看进程
 	netstat -lntp

5. 启动项目
	python3 manage.py runserver


部署2：
使用nginx+uwsgi配置django项目

1. 安装nginx
sudo apt-get install nginx
	
2. 查看nginx的状态

systemctl status nginx 查看nginx的状态
systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动

service nginx status/stop/restart/start



3. 安装uwsgi
pip install uwsgi

4. nginx的配置文件中加载自定义的nginx的配置文件

	vim /etc/nginx/nginx.conf
	在server中加入以下配置：
	include /home/app/conf/*.conf;


5. 配置自定义的nginx配置文件

server {
    listen       80;
    server_name 47.92.164.198 localhost;

    access_log /home/app/log/access.log;
    error_log /home/app/log/error.log;

    location / {
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:8890;
    }
    location /static/ {
        alias /home/app/day11axf0/static/;
        expires 30d;
    }

}


6. 配置uwsgi，名称为uwsgi.ini
[uwsgi]
# variables
projectname = day11axf0
newprojectname = day11axf
base = /home/app

# config
#plugins = python
master = true
#protocol = uwsgi
processes = 4
#env = DJANGO_SETTINGS_MODULE=%(projectname).settings
pythonpath = %(base)/%(projectname)
module = %(newprojectname).wsgi
socket = 127.0.0.1:8890
logto = %(base)/log/uwsgi.log


启动方式： uwsgi --ini uwsgi.ini




server {
	listen       80;
	listen       [::]:80;
	server_name  _;
	charset utf-8;

	access_log /usr/local/djangoaxf/log/access.log;
	error_log /usr/local/djangoaxf/log/error.log;
	
	location / {
		include /etc/nginx/uwsgi_params;
        uwsgi_pass 127.0.0.1:8090;
	}

	location /static/ {
        alias /usr/local/djangoaxf/axf1/static/;
    }
}



# mysite_uwsgi.ini file
[uwsgi]
# Django-related settings
# the base directory (full path)
chdir           = /usr/local/djangoaxf
# Django's wsgi file
module          = axf.wsgi
# the virtualenv (full path)

# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 4
# the socket (use the full path to be safe
socket          = 127.0.0.1:8090
# chmod-socket    = 664
# clear environment on exit
vacuum          = true
virtualenv = /usr/local/python3/pythonenvs/djangoenv


[uwsgi]
# 通过uwsgi访问django需要配置成http
# 通过nginx请求uwsgi来访问django 需要配置成socket
# 9000 是django的端口号
socket = :9000

# web项目根目录
chdir = /home/root/pydj/django_one

# module指定项目自带的的wsgi配置文件位置
module = django_one.wsgi

# 允许存在主进程
master = true

# 开启进程数量
processes = 3

# 服务器退出时自动清理环境
vacuum = true
# 设置日志
logto = /path/to/log_file

# 设置日志

daemonize = /path/to/log_file


[uwsgi]
socket = 127.0.0.1:3031     //启动程序时所使用的地址和端口，通常在本地运行flask项目，
                            //地址和端口是127.0.0.1:5000,
                            //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目，
                            //也就是说启动了uwsgi，也就启动了项目。
chmod-socket = 777
limit-as = 256
max-request = 2000
memory-report = true
home = /home/www/shawnlinq/venv     //虚拟环境中的python启动路径
pythonpath = /home/www/shawnlinq    //项目目录
wsgi-file = shawnlinq/manage.py      //flask程序的启动文件，通常在本地是通过运行python manage.py runserver 来启动项目的  
touch-reload = /home/www/shawnlinq    //项目内容改变时，重启uwsgi
callable = app      //程序内启用的application变量名
processes = 4     //处理器个数
threads = 2     //线程个数
stats = 127.0.0.1:9191      //获取uwsgi统计信息的服务地址
